[
{
	"uri": "//localhost:1313/1-host-a-static-website/",
	"title": "Host a static website with AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate a new React application Initialize a GitHub repository Install the Amplify packages Deploy app with AWS Amplify Create a new React application In a new terminal or command line window, run the following command to use Vite to create a React application: npm create vite@latest ai-recipe-generator -- --template react-ts -y cd ai-recipe-generator npm install npm run dev In the terminal of Visual Studio Code, select and open the Local link to view the Vite + React application. Initialize a GitHub repository In the Start a new repository section, make the following selections: For Repository name, enter ai-recipe-generator, and choose the Public radio button. Then select, Create a new repository. Open a new terminal window, navigate to projects, and run the following commands to initialize a git and push of the application to the new GitHub repo: Option 1: Avaiable to authenticate with GitHub using your SSH key\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git remote add origin git@github.com:\u0026lt;your-username\u0026gt;/\u0026lt;your-repo-name\u0026gt;.git git branch -M main git push -u origin main Replace the SSH GitHub URL in the command with GitHub URL.\nOption 2: If you don\u0026rsquo;t generate an SSH key before\ngit init git add . git commit -m \u0026#34;first commit\u0026#34; git remote set-url origin https://github.com/\u0026lt;your-username\u0026gt;/\u0026lt;your-repo-name\u0026gt; git branch -M main git push -u origin main Install the Amplify packages Open a new terminal window, navigate to your project, and run the following command: npm create amplify@latest -y In your terminal window, run the following command to push the changes to GitHub: git add . git commit -m \u0026#39;installing amplify\u0026#39; git push origin main Deploy app with AWS Amplify Sign in to the AWS Management console in a new browser window, and open the AWS Amplify console at AWS Amplify. Choose Create new app. On the Start building with Amplify page, for Deploy your app, select GitHub, and select Next. When prompted, authenticate with GitHub. You will be automatically redirected back to the Amplify console. Choose the repository and main branch you created earlier. Then select Next. Leave the default build settings, and select Next. Review the inputs selected, and choose Save and deploy. Once the build completes, select the Visit deployed URL button to see your web app up and running live. AWS Amplify will now build your source code and deploy your app at https://...amplifyapp.com "
},
{
	"uri": "//localhost:1313/",
	"title": "Workshop 0",
	"tags": [],
	"description": "",
	"content": "AI-Powered Serverless App with AWS Overview In this workshop, I will do the process of using AWS Amplify to build a serverless web application powered by Generative AI, utilizing Amazon Bedrock and the Claude 3 Sonnet foundation model. The application will feature an HTML-based user interface for ingredient submission and a backend web application that handles requests for AI-generated recipes.\nHaving a free tier or not, if you use AWS Bedrock, especially with models like Claude 3 Sonnet, may incur additional charges. Please review the AWS Bedrock pricing to understand the potential costs before proceeding.\nPrerequisites Before attending this workshop, participants should have:\nAn AWS account: If you don\u0026rsquo;t already have one, follow the instructions in the Setup Your Environment section. AWS CLI/AWS profile configured for local development. Node.js and npm on your development environment. Familiarity with Git and a GitHub account. Application Architecture The architecture of this application includes several AWS services, such as AWS Amplify, AWS Lambda, AWS AppSync and Amazon Bedrock. The following diagram provides a visual representation of how these services are connected. Throughout the workshop, participants will learn about each service in detail and find additional resources to help them gain proficiency.\nMain Content This workshop is structured into the following tasks, which participants must complete in sequence:\nHost a Static Website: Configure AWS Amplify to host the frontend application with built-in continuous deployment. Manage Users: Set up Amplify Auth and enable access to the Amazon Bedrock foundation model. Build a Serverless Backend: Develop a backend for handling application requests. Deploy the backend API: Define a custom query to connect to Amazon Bedrock Build the Frontend: Set up Amplify Data and connect the frontend application to the backend. Clean Up Resources: Properly clean up and deprovision resources used during the workshop. By structuring the workshop in this manner, participants will gradually build a fully functional serverless web application while gaining hands-on experience with AWS services and Generative AI.\n"
},
{
	"uri": "//localhost:1313/2-manage-users/",
	"title": "Manage user",
	"tags": [],
	"description": "",
	"content": "Content:\nSet up Amplify Auth Set up Amazon Bedrock Model Access Set up Amplify Auth On your local machine, navigate to the ai-generated-recipes/amplify/auth/resource.ts file and update it with the following code. Then, save the file.\nimport { defineAuth } from \u0026#34;@aws-amplify/backend\u0026#34;; export const auth = defineAuth({ loginWith: { email: { verificationEmailStyle: \u0026#34;CODE\u0026#34;, verificationEmailSubject: \u0026#34;Welcome to the AI-Powered Recipe Generator!\u0026#34;, verificationEmailBody: (createCode) =\u0026gt; `Use this code to confirm your account: ${createCode()}`, }, }, }); This is an example of the customized verification email:\nSet up Amazon Bedrock Model Access Sign in to the AWS Management console in a new browser window, and open the AWS Amazon Bedrock console at AWS Bedrock. Verify that you are in the N. Virginia us-east-1 region, and choose Get started. In the Foundation models section, choose the Claude model. Scroll down to the Claude models section, and choose the Claude 3 Sonnet tab, and select Request model access. If you already have access to some models, then the button will display Manage model access.\nIn the Base models section, for Claude 3 Sonnet, choose Available to request, and select Request model access. On the Edit model access page, choose Next. On the Review and Submit page, choose Submit. If this is the first model you request to access, you have to do one more step that fill in a form that include Company name and purpose of your project\n"
},
{
	"uri": "//localhost:1313/3-build-a-serverless-backend/",
	"title": "Build a serverless backend",
	"tags": [],
	"description": "",
	"content": "Content:\nCreate a Lambda function for handling requests Add Amazon Bedrock as a data source Create a Lambda function for handling requests On your local machine, navigate to the ai-recipe-generator/amplify/data folder, and create a file named bedrock.js.\nThen, update the file with the following code:\nThe following code defines a request function that constructs the HTTP request to invoke the Claude 3 Sonnet foundation model in Amazon Bedrock. The response function parses the response and returns the generated recipe. export function request(ctx) { const { ingredients = [] } = ctx.args; // Construct the prompt with the provided ingredients const prompt = `Suggest a recipe idea using these ingredients: ${ingredients.join(\u0026#34;, \u0026#34;)}.`; // Return the request configuration return { resourcePath: `/model/anthropic.claude-3-sonnet-20240229-v1:0/invoke`, method: \u0026#34;POST\u0026#34;, params: { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, }, body: JSON.stringify({ anthropic_version: \u0026#34;bedrock-2023-05-31\u0026#34;, max_tokens: 1000, messages: [ { role: \u0026#34;user\u0026#34;, content: [ { type: \u0026#34;text\u0026#34;, text: `\\n\\nHuman: ${prompt}\\n\\nAssistant:`, }, ], }, ], }), }, }; } export function response(ctx) { // Parse the response body const parsedBody = JSON.parse(ctx.result.body); // Extract the text content from the response const res = { body: parsedBody.content[0].text, }; // Return the response return res; } Add Amazon Bedrock as a data source Update the amplify/backend.ts file with the following code. Then, save the file. The code adds an HTTP data source for Amazon Bedrock to your API and grant it permissions to invoke the Claude model. import { defineBackend } from \u0026#34;@aws-amplify/backend\u0026#34;; import { data } from \u0026#34;./data/resource\u0026#34;; import { PolicyStatement } from \u0026#34;aws-cdk-lib/aws-iam\u0026#34;; import { auth } from \u0026#34;./auth/resource\u0026#34;; const backend = defineBackend({ auth, data, }); const bedrockDataSource = backend.data.resources.graphqlApi.addHttpDataSource( \u0026#34;bedrockDS\u0026#34;, \u0026#34;https://bedrock-runtime.us-east-1.amazonaws.com\u0026#34;, { authorizationConfig: { signingRegion: \u0026#34;us-east-1\u0026#34;, signingServiceName: \u0026#34;bedrock\u0026#34;, }, } ); bedrockDataSource.grantPrincipal.addToPrincipalPolicy( new PolicyStatement({ resources: [ \u0026#34;arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0\u0026#34;, ], actions: [\u0026#34;bedrock:InvokeModel\u0026#34;], }) ); "
},
{
	"uri": "//localhost:1313/4-deploy-the-backend-api/",
	"title": "Deploy the backend API",
	"tags": [],
	"description": "",
	"content": "Set up Amplify Data On your local machine, navigate to the ai-recipe-generator/amplify/data/resource.ts file, and update it with the following code. Then, save the file. The following code defines the askBedrock query that takes an array of strings called ingredients and returns a BedrockResponse. The .handler(a.handler.custom({ entry: \u0026ldquo;./bedrock.js\u0026rdquo;, dataSource: \u0026ldquo;bedrockDS\u0026rdquo; })) line sets up a custom handler for this query, defined in bedrock.js, using bedrockDS as its data source. import { type ClientSchema, a, defineData } from \u0026#34;@aws-amplify/backend\u0026#34;; const schema = a.schema({ BedrockResponse: a.customType({ body: a.string(), error: a.string(), }), askBedrock: a .query() .arguments({ ingredients: a.string().array() }) .returns(a.ref(\u0026#34;BedrockResponse\u0026#34;)) .authorization((allow) =\u0026gt; [allow.authenticated()]) .handler( a.handler.custom({ entry: \u0026#34;./bedrock.js\u0026#34;, dataSource: \u0026#34;bedrockDS\u0026#34; }) ), }); export type Schema = ClientSchema\u0026lt;typeof schema\u0026gt;; export const data = defineData({ schema, authorizationModes: { defaultAuthorizationMode: \u0026#34;apiKey\u0026#34;, apiKeyAuthorizationMode: { expiresInDays: 30, }, }, }); Open a new terminal window, navigate to your apps project folder, and run the following command to deploy cloud resources into an isolated development space so you can iterate fast. npx ampx sandbox If you got SSMCredentialsError: AccessDeniedException Error, you can attach policies directly named AmazonSSMReadOnlyAccess to your Users in IAM\nOnce the cloud sandbox has been fully deployed, your terminal will display a confirmation message and the amplify_outputs.json file will be generated and added to your project. "
},
{
	"uri": "//localhost:1313/5-build-the-frontend/",
	"title": "Build the frontend",
	"tags": [],
	"description": "",
	"content": "Content:\nInstall the Amplify Libraries Style the App UI Implement the UI Install the Amplify libraries You will need two Amplify libraries for your project. The main aws-amplify library contains all of the client-side APIs for connecting your app\u0026rsquo;s frontend to your backend, and the @aws-amplify/ui-react library contains framework-specific UI components.\nOpen a new terminal window, navigate to your projects root folder, and run the following command to install the libraries. npm install aws-amplify @aws-amplify/ui-react Style the app UI On your local machine, navigate to the ai-recipe-generator/src/index.css file, and update it with the following code to center the App UI. Then, save the file. :root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; line-height: 1.5; font-weight: 400; color: rgba(255, 255, 255, 0.87); font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; max-width: 1280px; margin: 0 auto; padding: 2rem; } .card { padding: 2em; } .read-the-docs { color: #888; } .box:nth-child(3n + 1) { grid-column: 1; } .box:nth-child(3n + 2) { grid-column: 2; } .box:nth-child(3n + 3) { grid-column: 3; } Update the src/App.css file with the following code to style the ingredients form. Then, save the file. .app-container { margin: 0 auto; padding: 20px; text-align: center; } .header-container { padding-bottom: 2.5rem; margin: auto; text-align: center; align-items: center; max-width: 48rem; } .main-header { font-size: 2.25rem; font-weight: bold; color: #1a202c; } .main-header .highlight { color: #2563eb; } @media (min-width: 640px) { .main-header { font-size: 3.75rem; } } .description { font-weight: 500; font-size: 1.125rem; max-width: 65ch; color: #1a202c; } .form-container { margin-bottom: 20px; } .search-container { display: flex; flex-direction: column; gap: 10px; align-items: center; } .wide-input { width: 100%; padding: 10px; font-size: 16px; border: 1px solid #ccc; border-radius: 4px; } .search-button { width: 100%; /* Make the button full width */ max-width: 300px; /* Set a maximum width for the button */ padding: 10px; font-size: 16px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; } .search-button:hover { background-color: #0056b3; } .result-container { margin-top: 20px; transition: height 0.3s ease-out; overflow: hidden; } .loader-container { display: flex; flex-direction: column; align-items: center; gap: 10px; } .result { background-color: #f8f9fa; border: 1px solid #e9ecef; border-radius: 4px; padding: 15px; white-space: pre-wrap; word-wrap: break-word; color: black; font-weight: bold; text-align: left; /* Align text to the left */ } Implement the UI On your local machine, navigate to the ai-recipe-generator/src/main.tsx file, and update it with the following code. Then, save the file. The code will use the Amplify Authenticator component to scaffold out an entire user authentication flow allowing users to sign up, sign in, reset their password, and confirm sign-in for multifactor authentication (MFA). import React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App.jsx\u0026#34;; import \u0026#34;./index.css\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)!).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Authenticator\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Authenticator\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); Open the ai-recipe-generator/src/App.tsx file, and update it with the following code. Then, save the file. The code starts by configuring the Amplify library with the client configuration file (amplify_outputs.json). It then generates a data client using the generateClient() function. The app presents a form to users for submitting a list of ingredients. Once submitted, it will use the data client to pass the list to the askBedrock query and retrieve the generated recipe then display it to the user. import { FormEvent, useState } from \u0026#34;react\u0026#34;; import { Loader, Placeholder } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;./App.css\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import { Schema } from \u0026#34;../amplify/data/resource\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/data\u0026#34;; import outputs from \u0026#34;../amplify_outputs.json\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; Amplify.configure(outputs); const amplifyClient = generateClient\u0026lt;Schema\u0026gt;({ authMode: \u0026#34;userPool\u0026#34;, }); function App() { const [result, setResult] = useState\u0026lt;string\u0026gt;(\u0026#34;\u0026#34;); const [loading, setLoading] = useState(false); const onSubmit = async (event: FormEvent\u0026lt;HTMLFormElement\u0026gt;) =\u0026gt; { event.preventDefault(); setLoading(true); try { const formData = new FormData(event.currentTarget); const { data, errors } = await amplifyClient.queries.askBedrock({ ingredients: [formData.get(\u0026#34;ingredients\u0026#34;)?.toString() || \u0026#34;\u0026#34;], }); if (!errors) { setResult(data?.body || \u0026#34;No data returned\u0026#34;); } else { console.log(errors); } } catch (e) { alert(`An error occurred: ${e}`); } finally { setLoading(false); } }; return ( \u0026lt;div className=\u0026#34;app-container\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;header-container\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;main-header\u0026#34;\u0026gt; Meet Your Personal \u0026lt;br /\u0026gt; \u0026lt;span className=\u0026#34;highlight\u0026#34;\u0026gt;Recipe AI\u0026lt;/span\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;description\u0026#34;\u0026gt; Simply type a few ingredients using the format ingredient1, ingredient2, etc., and Recipe AI will generate an all-new recipe on demand... \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;form onSubmit={onSubmit} className=\u0026#34;form-container\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;search-container\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; className=\u0026#34;wide-input\u0026#34; id=\u0026#34;ingredients\u0026#34; name=\u0026#34;ingredients\u0026#34; placeholder=\u0026#34;Ingredient1, Ingredient2, Ingredient3,...etc\u0026#34; /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; className=\u0026#34;search-button\u0026#34;\u0026gt; Generate \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div className=\u0026#34;result-container\u0026#34;\u0026gt; {loading ? ( \u0026lt;div className=\u0026#34;loader-container\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt; \u0026lt;Loader size=\u0026#34;large\u0026#34; /\u0026gt; \u0026lt;Placeholder size=\u0026#34;large\u0026#34; /\u0026gt; \u0026lt;Placeholder size=\u0026#34;large\u0026#34; /\u0026gt; \u0026lt;Placeholder size=\u0026#34;large\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ) : ( result \u0026amp;\u0026amp; \u0026lt;p className=\u0026#34;result\u0026#34;\u0026gt;{result}\u0026lt;/p\u0026gt; )} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Open a new terminal window, navigate to your projects root directory, and run the following command to launch the app: npm run dev Choose the Create Account tab, and use the authentication flow to create a new user by entering your email address and a password. Then, choose Create Account. You will get a verification code sent to your email. Enter the verification code to log in to the app. When signed in, you can start inputting ingredients And generating recipes by clicking to generate button.\nIn the open terminal window, run the following command to push the changes to GitHub: git add . git commit -m \u0026#39;connect to bedrock\u0026#39; git push origin main Sign in to the AWS Management console in a new browser window, and open the AWS Amplify console at AWS Amplify.\nAWS Amplify automatically builds your source code and deployed your app at https://...amplifyapp.com, and on every git push your deployment instance will update.\nSelect the Visit deployed URL button to see your web app up and running live. "
},
{
	"uri": "//localhost:1313/6-clean-up-resources/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Clean up Resources In the Amplify console, in the left-hand navigation for the ai-recipe-generator app, choose App settings, and select General settings.\nIn the General settings section, choose Delete app.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]